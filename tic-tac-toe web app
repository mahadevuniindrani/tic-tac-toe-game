import React, { useState } from "react";
import { Button } from "@/components/ui/button";

const initialBoard = Array(9).fill(null);

const winningCombinations = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

const checkWinner = (board) => {
  for (let [a, b, c] of winningCombinations) {
    if (board[a] && board[a] === board[b] && board[a] === board[c]) {
      return board[a];
    }
  }
  return null;
};

const getAvailableMoves = (board) => board.map((v, i) => (v === null ? i : null)).filter(v => v !== null);

const getComputerMove = (board) => {
  const available = getAvailableMoves(board);
  return available[Math.floor(Math.random() * available.length)];
};

export default function TicTacToe() {
  const [board, setBoard] = useState(initialBoard);
  const [xIsNext, setXIsNext] = useState(true);
  const [isVsComputer, setIsVsComputer] = useState(true);
  const winner = checkWinner(board);

  const handleClick = (index) => {
    if (board[index] || winner) return;

    const newBoard = [...board];
    newBoard[index] = xIsNext ? "X" : "O";
    setBoard(newBoard);
    setXIsNext(!xIsNext);

    if (isVsComputer && !xIsNext && !checkWinner(newBoard)) {
      setTimeout(() => {
        const move = getComputerMove(newBoard);
        if (move !== undefined) {
          const updatedBoard = [...newBoard];
          updatedBoard[move] = "X";
          setBoard(updatedBoard);
          setXIsNext(true);
        }
      }, 500);
    }
  };

  const handleRestart = () => {
    setBoard(initialBoard);
    setXIsNext(true);
  };

  return (
    <div className="flex flex-col items-center p-4 space-y-4">
      <h1 className="text-2xl font-bold">Tic Tac Toe</h1>
      <div className="grid grid-cols-3 gap-2">
        {board.map((value, index) => (
          <button
            key={index}
            className="w-16 h-16 text-xl font-bold border rounded flex items-center justify-center bg-gray-100 hover:bg-gray-200"
            onClick={() => handleClick(index)}
          >
            {value}
          </button>
        ))}
      </div>
      <div className="text-lg">
        {winner ? `Winner: ${winner}` : board.includes(null) ? `Next Player: ${xIsNext ? "X" : "O"}` : "Draw!"}
      </div>
      <Button onClick={handleRestart}>Restart Game</Button>
      <Button variant="outline" onClick={() => setIsVsComputer(!isVsComputer)}>
        {isVsComputer ? "Play vs Human" : "Play vs Computer"}
      </Button>
    </div>
  );
}
